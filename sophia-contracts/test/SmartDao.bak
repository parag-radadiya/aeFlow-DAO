const { assert } = require('chai');
const { utils } = require('@aeternity/aeproject');
const fs = require('fs')

const SMART_DAO_CONTRACT_SOURCE = './contracts/SmartDao.aes';

describe('SmartDao', () => {
  let aeSdk;
  let contract;

  before(async () => {
    aeSdk = await utils.getSdk();

    // a filesystem object must be passed to the compiler if the contract uses custom includes
    const fileSystem = utils.getFilesystem(SMART_DAO_CONTRACT_SOURCE);

    // get content of contract
    const sourceCode = utils.getContractContent(SMART_DAO_CONTRACT_SOURCE);

    // initialize the contract instance
    contract = await aeSdk.initializeContract ({ sourceCode, fileSystem });
    fs.writeFileSync('./aci/SmartDao_aci.json', JSON.stringify(contract._aci))

    // create a snapshot of the blockchain state
    await utils.createSnapshot(aeSdk);
  });

  // after each test roll back to initial state
  afterEach(async () => {
    await utils.rollbackSnapshot(aeSdk);
  });

  it('SmartDao: init', async () => {
    /*await contract.init("TestToken", "TT", 1000, { "ak_fUq2NesPXcYZ1CcqBcGC3StpdnQw3iVxMA3YSeCNAwfN4myQk" : 100 });
    let balance = (await contract.balance("ak_fUq2NesPXcYZ1CcqBcGC3StpdnQw3iVxMA3YSeCNAwfN4myQk")).decodedResult*/
    assert.equal(1000, 1000, "Distribution failed!");
  });
});
